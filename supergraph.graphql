schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION)
{
  query: Query
}

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Application
  @join__type(graph: BACKLOG, key: "id", extension: true)
  @join__type(graph: CATALOG, key: "id")
  @join__type(graph: WORKFORCE, key: "id", extension: true)
{
  id: ID!
  agileEntityName: String @join__field(graph: BACKLOG, external: true) @join__field(graph: CATALOG)
  backlog: Backlog @join__field(graph: BACKLOG, requires: "agileEntityName")
  name: String @join__field(graph: CATALOG)
  description: String @join__field(graph: CATALOG)
  team: ApplicationTeam @join__field(graph: WORKFORCE)
}

type ApplicationTeam
  @join__type(graph: WORKFORCE, key: "id")
{
  id: ID!
  name: String
  associates: [Associate!]!
}

type Associate
  @join__type(graph: WORKFORCE)
{
  name: String!
  description: String
  email: String
  role: String
  imageUrl: String
  link: String
}

type Backlog
  @join__type(graph: BACKLOG, key: "id")
{
  id: ID!
  backlogUrl: String!
  issueSummaries: [IssueSummary!]!
}

type IssueSummary
  @join__type(graph: BACKLOG)
{
  name: String!
  iconUrl: String!
  count: String!
}

scalar join__DirectiveArguments

scalar join__FieldSet

enum join__Graph {
  BACKLOG @join__graph(name: "backlog", url: "http://localhost:3001/graphql")
  CATALOG @join__graph(name: "catalog", url: "http://localhost:7007/api/catalog/graphql")
  WORKFORCE @join__graph(name: "workforce", url: "http://localhost:3002/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: BACKLOG)
  @join__type(graph: CATALOG)
  @join__type(graph: WORKFORCE)
{
  backlog(id: ID!): Backlog @join__field(graph: BACKLOG)
  applicationById(id: ID!): Application @join__field(graph: CATALOG)
  applicationTeam(id: ID!): ApplicationTeam @join__field(graph: WORKFORCE)
}